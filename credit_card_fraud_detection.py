# -*- coding: utf-8 -*-
"""Credit card fraud detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1egzSAd9hbwnEW4Rvy7VL4D9Ea-nBxWSF
"""

# Step 0: Install required packages
!pip install kaggle seaborn

# Step 1: Upload kaggle.json file (Kaggle API token)
from google.colab import files
print("Upload your kaggle.json file (Kaggle API token):")
uploaded = files.upload()

import os
uploaded_file_name = list(uploaded.keys())[0]
print(f"Uploaded file name: {uploaded_file_name}")

# Step 2: Move kaggle.json to the correct location and set permissions
os.makedirs(os.path.expanduser("~/.kaggle"), exist_ok=True)
!cp "{uploaded_file_name}" ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

print("kaggle.json moved and permissions set.")

# Step 3: Download and unzip dataset from Kaggle
print("Downloading dataset from Kaggle...")
!kaggle datasets download -d mlg-ulb/creditcardfraud --unzip

# Step 4: Import libraries
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import seaborn as sns

# Step 5: Load dataset
df = pd.read_csv('creditcard.csv')
print(f"Dataset loaded with shape: {df.shape}")
print(df.head())

# Step 6: Preprocessing
if 'Time' in df.columns:
    df.drop(['Time'], axis=1, inplace=True)

scaler = StandardScaler()
df['Amount'] = scaler.fit_transform(df['Amount'].values.reshape(-1,1))

true_labels = df['Class']
features = df.drop(['Class'], axis=1)

# Step 7: Train Isolation Forest model
model = IsolationForest(n_estimators=100, contamination=0.001, random_state=42)
df['anomaly_score'] = model.fit_predict(features)
df['anomaly'] = df['anomaly_score'].map({1: 0, -1: 1})

# Step 8: Evaluate model
print("Confusion Matrix:")
print(confusion_matrix(true_labels, df['anomaly']))
print("\nClassification Report:")
print(classification_report(true_labels, df['anomaly'], digits=4))

# Step 9: PCA visualization
pca = PCA(n_components=2)
pca_result = pca.fit_transform(features)
df['PCA1'] = pca_result[:, 0]
df['PCA2'] = pca_result[:, 1]

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='PCA1', y='PCA2', hue='anomaly', palette={0:'blue',1:'red'}, alpha=0.6)
plt.title("Anomaly Detection Visualization (PCA Projection)")
plt.show()